SAMPLES=["H1", "H2", "H3"]

rule all:
    input:
       trimfilt=expand("test_TrimFilt_reads/tf_{sample}_{nummer}.fastq", sample=SAMPLES, nummer=[1,2]),
       html=expand("test_HTML_outputs/{sample}.html", sample=SAMPLES),
       mapping_sam=expand("test_unmappedBamFiles/{sample}.sam",sample=SAMPLES),
       samtobam=expand("test_unmappedBamFiles/{sample}.bam", sample=SAMPLES),
       namesort=expand("test_unmappedBamFiles/NS_{sample}.bam", sample=SAMPLES),
       fixmate=expand("test_unmappedBamFiles/FM_{sample}.bam", sample=SAMPLES),
       sort=expand("test_unmappedBamFiles/Sort_{sample}.bam", sample=SAMPLES),
       markdup=expand("test_unmappedBamFiles/MD_{sample}.bam", sample=SAMPLES),
       filt_mapped=expand("test_unmappedBamFiles/{sample}_unmapped.bam", sample=SAMPLES)


rule help:
   shell:
     "echo 'Hallo Foram Assembly team ;)'"


rule Trimming_and_Filtering_reads:
   input:
       forw="{sample}_1.fastq.gz",
       rev="{sample}_2.fastq.gz"

   output:
       out_forw="test_TrimFilt_reads/tf_{sample}_1.fastq",
       out_rev="test_TrimFilt_reads/tf_{sample}_2.fastq",
       out_html="test_HTML_outputs/{sample}.html"

   shell:
       "fastp -i {input.forw} -I {input.rev} -o {output.out_forw} -O {output.out_rev} -h {output.out_html}"


rule SamBam_Mapping:
   input:
      refgenome="GCA_001939145.1_ASM193914v1_genomic.fna",
      forw="test_TrimFilt_reads/tf_{sample}_1.fastq",
      rev="test_TrimFilt_reads/tf_{sample}_2.fastq"

   output:
      samfile="test_unmappedBamFiles/{sample}.sam",
      bamfile="test_unmappedBamFiles/{sample}.bam"

   shell:
      """
      ~/minimap2-2.17_x64-linux/./minimap2 -ax sr {input.refgenome} {input.forw} {input.rev} > {output.samfile}
      rm {input.forw}
      rm {input.rev}      
      samtools view -S -b {output.samfile} > {output.bamfile}
      """ 

rule BamSortbyName:
   input:
      "test_unmappedBamFiles/{sample}.bam"

   output:
      "test_unmappedBamFiles/NS_{sample}.bam"
   
   shell:
      """
      rm {params.basename}.sam
      samtools sort -n -o {output} {input}
      rm {input}
      """

rule Fixmate:
   input:
      "test_unmappedBamFiles/NS_{sample}.bam"
   
   output:
      "test_unmappedBamFiles/FM_{sample}.bam"
   
   shell:
      """
      samtools fixmate {input} {output}
      rm {input}
      """

rule SortingBam:
   input:
      "test_unmappedBamFiles/FM_{sample}.bam"
   
   output:
      "test_unmappedBamFiles/Sort_{sample}.bam"
   
   shell:
      """
      samtools sort -o {output.sort} {output.fm}
      rm {input}
      """

rule Markduplicates:
   input:
      "test_unmappedBamFiles/Sort_{sample}.bam"
   
   output:
      "test_unmappedBamFiles/MD_{sample}.bam"
   
   shell:
      """
      samtools markdup -r {input} {output}
      rm {input}
      """

rule Mapped_Filter:
   input:
      "test_unmappedBamFiles/MD_{sample}.bam"
   
   output:
      "test_unmappedBamFiles/{sample}_unmapped.bam"
   
   shell:
      """
      samtools view -b -f4 {input} > {output}
      rm {input}
      """
